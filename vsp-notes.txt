PRO vsp_loop (in vsp_lib.pro)

content_byte_size = 4LL * (2 - par.prec_single) * $
  par.nz0 * par.nv0 * par.nw0 * par.n_spec * 5 + 8 = 2621448

OPENR, vsp_lun, file_vsp.path[run], /GET_LUN, $
  ERROR=vsp_err, /F77_UNFORMATTED, SWAP_ENDIAN=series.swap_endian

jump_step = get_vsp_time(run)

  FUNCTION get_vsp_time
    OPENR, vsp_lun, file_vsp.path, /GET_LUN, ERROR=err, /F77_UNFORMATTED, $
      SWAP_ENDIAN=series.swap_endian
  
    time = par.prec_single ? 0.0 : 0.0D
    time_first_step = time
    time_second_step = time
    time_last_step = time
  
      vsp_size = (FSTAT(vsp_lun)).SIZE = 31457568
  
    content_byte_size = 4LL * (2 - par.prec_single) * par.nz0 * par.nv0 * $
      par.nw0 * par.n_spec * 5 + 8 = 2621448
    step_byte_size = content_byte_size + 16 - 4 * par.prec_single = 2621464
  
    pos_last_step = (FSTAT(vsp_lun)).SIZE - step_byte_size = 28836104
    n_steps = ROUND((FSTAT(vsp_lun)).SIZE/step_byte_size) = 12 ; # time steps
  
    READU, vsp_lun, time_first_step = 0.0
  
    POINT_LUN, - vsp_lun, position_before = 16 ; time value is 16 bytes
    position_after = position_before + content_byte_size = 2621464
  
    POINT_LUN, vsp_lun, position_after
    READU, vsp_lun, time_second_step = 10.399
  
    POINT_LUN, vsp_lun, pos_last_step
    READU, vsp_lun, time_last_step = 111.28
  
    avg_step_diff = (time_last_step - time_first_step) / FLOAT(n_steps) ; avg. delta t
  
    estimated_step = ROUND((start_time-time_first_step)/avg_step_diff) = 12
    estimated_pos_init = step_byte_size * estimated_step - $
      step_byte_size < (pos_last_step - step_byte_size) = 26214640
    
    POINT_LUN, vsp_lun, estimated_pos
    
    time_prev = par.prec_single ? 0.0 : 0.0D
    READU, vsp_lun, time_prev
    time_prev = time_prev  * time_renorm(0)
    POINT_LUN, - vsp_lun, position_before
    position_after = position_before + content_byte_size
    POINT_LUN, vsp_lun, position_after
    time_act = par.prec_single ? 0.0 : 0.0D
    READU, vsp_lun, time_act
    time_act = time_act  * time_renorm(0)
    time_diff_act = time_act - time_prev
    IF (start_time GT time_prev) AND (start_time LE time_act) THEN found = 1
    new_estimated_pos = step_byte_size * $
      ROUND((start_time-time_act)/time_diff_act) + estimated_pos
    IF (new_estimated_pos EQ estimated_pos) AND (found EQ 0) THEN $
      new_estimated_pos = new_estimated_pos + step_byte_size
    new_estimated_pos = 26214640
    estimated_pos = new_estimated_pos < (pos_last_step - step_byte_size) = 26214640
    step_pos = ROUND(estimated_pos/(1.0*step_byte_size)) = 10

    RETURN, step_pos

return to vsp_loop

jump_step = 10
jump_to_vsp_step, jump_step, vsp_lun

PRO jump_to_vsp_step
  time = par.prec_single ? 0.0 : 0.0D
  content = par.prec_single ? $
    FLTARR(par.nz0,par.nv0,par.nw0,gui.out.n_spec_sel,5,/NOZERO) : $
    DBLARR(par.nz0,par.nv0,par.nw0,gui.out.n_spec_sel,5,/NOZERO)
  READU, vsp_lun, time
  READU, vsp_lun, content
  POINT_LUN, - vsp_lun, vsp_step_bytes = 2621464
  jump_byte = LONG64(vsp_step_bytes) * jump_step = 26214640
  POINT_LUN, vsp_lun, jump_byte
